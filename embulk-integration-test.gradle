//
// Usage:
// Apply this gradle config file.
//   apply from: 'https://raw.githubusercontent.com/hata/gradle-plugins/master/embulk-integration-test.gradle'
// Set dependency like this:
//   project.tasks.integrationTest.dependsOn(classpath)
//
// To enable this plugin
// ./gradlew -DenableIntegrationTest=true gem
//

// src: https://github.com/brunodecarvalho/gradle-plugins/blob/master/integration-test.gradle
sourceSets {
  integrationTest { sourceSet ->
    ["java", "groovy", "scala", "resources"].each {
      if (!sourceSet.hasProperty(it)) return
      sourceSet."$it".srcDir file("src/integration-test/${it}")
    }
  }
}

// Setup dependencies for integration testing
dependencies {
  integrationTestImplementation sourceSets.main.output
  integrationTestImplementation sourceSets.test.output
  integrationTestImplementation configurations.testCompileClasspath
  integrationTestRuntimeOnly configurations.testRuntimeClasspath
}

// Define integration test task
task integrationTest(type: Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  reports.html.enabled = false
}

// TODO: Can I override these properties ?
def embulkDownloadURL = "http://dl.embulk.org/embulk-latest.jar"
def embulkExecPath = ''
def enableIntegrationTestFlag = Boolean.getBoolean('enableIntegrationTest')
def embulkIntegrationTestDir = 'embulk.integrationtest.dir'

task downloadEmbulk {
  embulkExecPath = "$temporaryDir/embulk/bin/embulk"

  doFirst {
    if (!enableIntegrationTestFlag) {
      throw new StopExecutionException('Skip downloadEmbulk task.')
    }
  }

  outputs.upToDateWhen {
    new File(embulkExecPath).exists()
  }

  doLast {
    exec {
      executable "sh"
      args "-c", "curl --create-dirs -o $embulkExecPath -L $embulkDownloadURL"
    }
    exec {
      executable "sh"
      args "-c", "chmod +x $embulkExecPath"
    }
  }
}


integrationTest.doFirst {
  String libDir = file('lib').absolutePath
  String baseDir = "$temporaryDir/embulk"
  systemProperty "$embulkIntegrationTestDir", "$baseDir"

  if (!enableIntegrationTestFlag) {
    throw new StopExecutionException('Skip integrationTest task.')
  }

  copy {
    from 'src/integration-test/resources'
    into baseDir
  }

  fileTree(dir: "$baseDir", include: "*.yml").visit { config ->
    ['preview', 'run'].each { embulkCommand ->
      String logFile = "${config.file.absolutePath}.${embulkCommand}.log"
      delete logFile

      exec {
        workingDir baseDir
        executable "sh"
        args "-c", "$embulkExecPath $embulkCommand -I $libDir $config.file.absolutePath --log $logFile"
      }
    }
  }
}

project.tasks.integrationTest.dependsOn(downloadEmbulk)

